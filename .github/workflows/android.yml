name: Build and Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build and Publish Release APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 31
        build-tools: 31.0.0

    - name: Extract Version Name and Code
      id: version
      run: |
        VERSION_NAME=$(grep -oP 'versionName\s+"\K[^"]+' app/build.gradle)
        VERSION_CODE=$(grep -oP 'versionCode\s+\K\d+' app/build.gradle)
        echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
        echo "VERSION_CODE=${VERSION_CODE}" >> $GITHUB_ENV

    - name: Build Release APK
      run: |
        chmod +x ./gradlew
        ./gradlew assembleRelease

    # 添加调试步骤
    - name: Debug - List Build Directory
      run: |
        echo "Listing app/build/outputs directory:"
        ls -R app/build/outputs
        echo "APK file size:"
        find app/build/outputs -name "*.apk" -exec ls -l {} \;

    # 重命名并移动 APK 文件
    - name: Prepare Release Asset
      run: |
        mkdir -p releases
        find app/build/outputs -name "*.apk" -exec cp {} releases/app-release-${{ env.VERSION_NAME }}.apk \;
        echo "Checking copied APK:"
        ls -l releases/

    - name: Create Release
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION_NAME }}"
        name: "Release v${{ env.VERSION_NAME }}"
        draft: false
        prerelease: false
        files: releases/app-release-${{ env.VERSION_NAME }}.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
